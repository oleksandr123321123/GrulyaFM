// Web Push Notifications –¥–ª—è iOS 16.4+ –∏ Android
// –¢—Ä–µ–±—É–µ—Ç HTTPS –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ PWA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

// VAPID –∫–ª—é—á–∏ (—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏: https://vapidkeys.com/)
// –≠—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á, –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
const VAPID_PUBLIC_KEY = 'YOUR_VAPID_PUBLIC_KEY_HERE';

let pushSubscription = null;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Push API
export function isPushSupported() {
  return 'serviceWorker' in navigator && 'PushManager' in window;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
export async function isPushSubscribed() {
  if (!isPushSupported()) return false;

  try {
    const registration = await navigator.serviceWorker.ready;
    pushSubscription = await registration.pushManager.getSubscription();
    return pushSubscription !== null;
  } catch (error) {
    console.error('Error checking push subscription:', error);
    return false;
  }
}

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export async function subscribeToPush() {
  if (!isPushSupported()) {
    throw new Error('Push notifications are not supported');
  }

  try {
    // –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    const permission = await Notification.requestPermission();

    if (permission !== 'granted') {
      throw new Error('Notification permission denied');
    }

    // –ü–æ–ª—É—á–∏—Ç—å service worker
    const registration = await navigator.serviceWorker.ready;

    // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ push
    const subscription = await registration.pushManager.subscribe({
      userVisibleOnly: true, // iOS —Ç—Ä–µ–±—É–µ—Ç —ç—Ç–æ
      applicationServerKey: urlBase64ToUint8Array(VAPID_PUBLIC_KEY)
    });

    pushSubscription = subscription;

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å subscription –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    await sendSubscriptionToServer(subscription);

    console.log('‚úÖ Push subscription created:', subscription);
    return subscription;
  } catch (error) {
    console.error('Error subscribing to push:', error);
    throw error;
  }
}

// –û—Ç–ø–∏—Å–∫–∞ –æ—Ç push
export async function unsubscribeFromPush() {
  if (!pushSubscription) {
    const registration = await navigator.serviceWorker.ready;
    pushSubscription = await registration.pushManager.getSubscription();
  }

  if (pushSubscription) {
    try {
      await pushSubscription.unsubscribe();
      await removeSubscriptionFromServer(pushSubscription);
      pushSubscription = null;
      console.log('‚úÖ Push unsubscribed');
      return true;
    } catch (error) {
      console.error('Error unsubscribing:', error);
      throw error;
    }
  }

  return false;
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å subscription –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async function sendSubscriptionToServer(subscription) {
  try {
    const response = await fetch('/api/push-subscribe', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        subscription: subscription.toJSON(),
        userAgent: navigator.userAgent,
        timestamp: Date.now()
      })
    });

    if (!response.ok) {
      throw new Error('Failed to send subscription to server');
    }

    console.log('‚úÖ Subscription sent to server');
  } catch (error) {
    console.error('Error sending subscription to server:', error);
    // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  }
}

// –£–¥–∞–ª–∏—Ç—å subscription —Å —Å–µ—Ä–≤–µ—Ä–∞
async function removeSubscriptionFromServer(subscription) {
  try {
    await fetch('/api/push-unsubscribe', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        endpoint: subscription.endpoint
      })
    });

    console.log('‚úÖ Subscription removed from server');
  } catch (error) {
    console.error('Error removing subscription:', error);
  }
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è VAPID –∫–ª—é—á–∞ –∏–∑ Base64
function urlBase64ToUint8Array(base64String) {
  const padding = '='.repeat((4 - base64String.length % 4) % 4);
  const base64 = (base64String + padding)
    .replace(/\-/g, '+')
    .replace(/_/g, '/');

  const rawData = window.atob(base64);
  const outputArray = new Uint8Array(rawData.length);

  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i);
  }
  return outputArray;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π iOS
export function isIOSPWA() {
  return window.navigator.standalone === true ||
         window.matchMedia('(display-mode: standalone)').matches;
}

// iOS Push –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ standalone —Ä–µ–∂–∏–º–µ
export function canUseIOSPush() {
  const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
  return isIOS && isIOSPWA() && isPushSupported();
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
export function getPushInfo() {
  const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
  const iOSVersion = isIOS ? parseFloat(
    ('' + (/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent) || [0,''])[1])
    .replace('undefined', '3_2').replace('_', '.').replace('_', '')
  ) || 0 : 0;

  return {
    isSupported: isPushSupported(),
    isIOS: isIOS,
    iOSVersion: iOSVersion,
    iOSPushSupported: iOSVersion >= 16.4, // iOS 16.4+ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Web Push
    isStandalone: isIOSPWA(),
    canUsePush: isIOS ? canUseIOSPush() : isPushSupported(),
    notificationPermission: 'Notification' in window ? Notification.permission : 'unavailable'
  };
}

// –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
export async function sendTestNotification() {
  if (!('Notification' in window)) {
    console.log('Notifications not supported');
    return;
  }

  if (Notification.permission !== 'granted') {
    const permission = await Notification.requestPermission();
    if (permission !== 'granted') {
      console.log('Notification permission denied');
      return;
    }
  }

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–µ —á–µ—Ä–µ–∑ push)
  const notification = new Notification('GrulyaFM Test', {
    body: 'Push notifications are working!',
    icon: '/icon-192.png',
    badge: '/icon-72.png',
    tag: 'test-notification',
    requireInteraction: false,
    vibrate: [200, 100, 200]
  });

  notification.onclick = () => {
    window.focus();
    notification.close();
  };

  setTimeout(() => notification.close(), 5000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
export function initPushNotifications() {
  if (!isPushSupported()) {
    console.log('‚ùå Push notifications not supported');
    return;
  }

  const info = getPushInfo();
  console.log('üì± Push Info:', info);

  if (info.isIOS && !info.iOSPushSupported) {
    console.log('‚ö†Ô∏è iOS version too old for Web Push (need 16.4+)');
  }

  if (info.isIOS && !info.isStandalone) {
    console.log('‚ö†Ô∏è iOS Web Push requires app to be installed to Home Screen');
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
  isPushSubscribed().then(subscribed => {
    if (subscribed) {
      console.log('‚úÖ Already subscribed to push notifications');
    } else {
      console.log('üì≠ Not subscribed to push notifications');
    }
  });
}
