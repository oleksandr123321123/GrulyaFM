// GrulyaFM - Global Radio Application
// Full multilingual support, no flags edition

// Translations
const CONTACT_EMAIL = 'yourmail@example.com';
const TRANSLATIONS = {
  en: {
    subtitle: 'Global Radio ‚Ä¢ 200+ Stations',
    bannerTitle: 'üåç Global Radio',
    bannerText: '200+ stations from 22 countries',
    selectStation: 'Select a station',
    clickStation: 'Click on a station below',
    searchPlaceholder: 'Search stations...',
    randomStation: 'Random Station',
    settings: 'Settings',
    language: 'Language',
    theme: 'Theme',
    darkMode: 'üåô Dark Mode',
    lightMode: '‚òÄÔ∏è Light Mode',
    visibleCountries: 'Visible Countries',
    addStation: 'Add Station',
    stationName: 'Station Name',
    streamURL: 'Stream URL',
    save: 'Save',
    sleepTimer: 'Sleep Timer',
    min: 'min',
    hour: 'hour',
    hours: 'hours',
    cancel: 'Cancel',
    cancelTimer: 'Cancel Timer',
    radioAlarm: 'Radio Alarm',
    time: 'Time',
    weekdays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    station: 'Station',
    setAlarm: 'Set Alarm',
    cancelAlarm: 'Cancel Alarm',
    connecting: 'Connecting...',
    live: 'Live',
    addedToFav: 'Added to favorites',
    removedFromFav: 'Removed from favorites',
    stationAdded: 'Station added!',
    fillAllFields: 'Fill in all fields',
    invalidURL: 'Invalid URL',
    timerSet: 'Timer set for',
    goodNight: 'Good night!',
    alarmSet: 'Alarm set for',
    alarmCancelled: 'Alarm cancelled',
    timerCancelled: 'Timer cancelled',
    goodMorning: 'Good morning! Alarm started',
    all: 'üåê All',
    favorites: '‚ù§Ô∏è Favorites',
    alarm: 'Alarm',
    remaining: 'Remaining',
    aboutTitle: 'About GrulyaFM',
    aboutLead: 'GrulyaFM ‚Äî global internet radio. Design and development: Grulya.',
    contactTitle: 'Contact',
    privacyTitle: 'Privacy',
    privacyShort: 'GrulyaFM does not collect or transmit your personal data. Settings and favorite stations are stored only in your browser or in your Supabase account.',
    privacyLink: 'More about privacy policy'
  },
  ru: {
    subtitle: '–ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ä–∞–¥–∏–æ ‚Ä¢ 200+ —Å—Ç–∞–Ω—Ü–∏–π',
    bannerTitle: 'üåç –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ä–∞–¥–∏–æ',
    bannerText: '200+ —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ 22 —Å—Ç—Ä–∞–Ω –º–∏—Ä–∞',
    selectStation: '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é',
    clickStation: '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é –Ω–∏–∂–µ',
    searchPlaceholder: '–ü–æ–∏—Å–∫ —Å—Ç–∞–Ω—Ü–∏–π...',
    randomStation: '–°–ª—É—á–∞–π–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è',
    settings: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
    language: '–Ø–∑—ã–∫',
    theme: '–¢–µ–º–∞',
    darkMode: 'üåô –¢—ë–º–Ω–∞—è —Ç–µ–º–∞',
    lightMode: '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞',
    visibleCountries: '–û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ —Å—Ç—Ä–∞–Ω—ã',
    addStation: '–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–Ω—Ü–∏—é',
    stationName: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏',
    streamURL: 'URL –ø–æ—Ç–æ–∫–∞',
    save: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
    sleepTimer: '–¢–∞–π–º–µ—Ä —Å–Ω–∞',
    min: '–º–∏–Ω',
    hour: '—á–∞—Å',
    hours: '—á–∞—Å–∞',
    cancel: '–û—Ç–º–µ–Ω–∞',
    cancelTimer: '–û—Ç–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä',
    radioAlarm: '–ë—É–¥–∏–ª—å–Ω–∏–∫',
    time: '–í—Ä–µ–º—è',
    weekdays: ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'],
    station: '–°—Ç–∞–Ω—Ü–∏—è',
    setAlarm: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫',
    cancelAlarm: '–û—Ç–º–µ–Ω–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫',
    connecting: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...',
    live: '–ü—Ä—è–º–æ–π —ç—Ñ–∏—Ä',
    addedToFav: '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
    removedFromFav: '–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ',
    stationAdded: '–°—Ç–∞–Ω—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!',
    fillAllFields: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è',
    invalidURL: '–ù–µ–≤–µ—Ä–Ω—ã–π URL',
    timerSet: '–¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞',
    goodNight: '–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏!',
    alarmSet: '–ë—É–¥–∏–ª—å–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞',
    alarmCancelled: '–ë—É–¥–∏–ª—å–Ω–∏–∫ –æ—Ç–º–µ–Ω—ë–Ω',
    timerCancelled: '–¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω',
    goodMorning: '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ë—É–¥–∏–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω',
    all: 'üåê –í—Å–µ',
    favorites: '‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ',
    alarm: '–ë—É–¥–∏–ª—å–Ω–∏–∫',
    remaining: '–û—Å—Ç–∞–ª–æ—Å—å',
    aboutTitle: '–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ GrulyaFM',
    aboutLead: 'GrulyaFM ‚Äî –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–∞–¥–∏–æ. –î–∏–∑–∞–π–Ω –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: Grulya.',
    contactTitle: '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
    privacyTitle: '–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å',
    privacyShort: 'GrulyaFM –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ –∏–ª–∏ –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ Supabase.',
    privacyLink: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏'
  },
  de: {
    subtitle: 'Globales Radio ‚Ä¢ 200+ Sender',
    bannerTitle: 'üåç Globales Radio',
    bannerText: '200+ Sender aus 22 L√§ndern',
    selectStation: 'W√§hlen Sie einen Sender',
    clickStation: 'Klicken Sie unten auf einen Sender',
    searchPlaceholder: 'Sender suchen...',
    randomStation: 'Zuf√§lliger Sender',
    settings: 'Einstellungen',
    language: 'Sprache',
    theme: 'Design',
    darkMode: 'üåô Dunkler Modus',
    lightMode: '‚òÄÔ∏è Heller Modus',
    visibleCountries: 'Sichtbare L√§nder',
    addStation: 'Sender hinzuf√ºgen',
    stationName: 'Sendername',
    streamURL: 'Stream-URL',
    save: 'Speichern',
    sleepTimer: 'Schlaf-Timer',
    min: 'Min',
    hour: 'Std',
    hours: 'Std',
    cancel: 'Abbrechen',
    cancelTimer: 'Timer abbrechen',
    radioAlarm: 'Radio-Wecker',
    time: 'Zeit',
    weekdays: ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'],
    station: 'Sender',
    setAlarm: 'Wecker stellen',
    cancelAlarm: 'Wecker abbrechen',
    connecting: 'Verbinden...',
    live: 'Live',
    addedToFav: 'Zu Favoriten hinzugef√ºgt',
    removedFromFav: 'Aus Favoriten entfernt',
    stationAdded: 'Sender hinzugef√ºgt!',
    fillAllFields: 'Alle Felder ausf√ºllen',
    invalidURL: 'Ung√ºltige URL',
    timerSet: 'Timer eingestellt auf',
    goodNight: 'Gute Nacht!',
    alarmSet: 'Wecker gestellt auf',
    alarmCancelled: 'Wecker abgebrochen',
    timerCancelled: 'Timer abgebrochen',
    goodMorning: 'Guten Morgen! Wecker gestartet',
    all: 'üåê Alle',
    favorites: '‚ù§Ô∏è Favoriten',
    alarm: 'Wecker',
    remaining: 'Verbleibend',
    aboutTitle: '√úber GrulyaFM',
    aboutLead: 'GrulyaFM ‚Äî globales Internetradio. Design und Entwicklung: Grulya.',
    contactTitle: 'Kontakt',
    privacyTitle: 'Datenschutz',
    privacyShort: 'GrulyaFM sammelt und √ºbertr√§gt Ihre pers√∂nlichen Daten nicht. Einstellungen und Lieblingssender werden nur in Ihrem Browser oder in Ihrem Supabase-Konto gespeichert.',
    privacyLink: 'Mehr √ºber Datenschutz'
  },
  fr: {
    subtitle: 'Radio Mondiale ‚Ä¢ 200+ Stations',
    bannerTitle: 'üåç Radio Mondiale',
    bannerText: '200+ stations de 22 pays',
    selectStation: 'S√©lectionner une station',
    clickStation: 'Cliquez sur une station ci-dessous',
    searchPlaceholder: 'Rechercher des stations...',
    randomStation: 'Station al√©atoire',
    settings: 'Param√®tres',
    language: 'Langue',
    theme: 'Th√®me',
    darkMode: 'üåô Mode sombre',
    lightMode: '‚òÄÔ∏è Mode clair',
    visibleCountries: 'Pays visibles',
    addStation: 'Ajouter une station',
    stationName: 'Nom de la station',
    streamURL: 'URL du flux',
    save: 'Enregistrer',
    sleepTimer: 'Minuterie de sommeil',
    min: 'min',
    hour: 'h',
    hours: 'h',
    cancel: 'Annuler',
    cancelTimer: 'Annuler la minuterie',
    radioAlarm: 'R√©veil radio',
    time: 'Heure',
    weekdays: ['Dim', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam'],
    station: 'Station',
    setAlarm: 'D√©finir l\'alarme',
    cancelAlarm: 'Annuler l\'alarme',
    connecting: 'Connexion...',
    live: 'En direct',
    addedToFav: 'Ajout√© aux favoris',
    removedFromFav: 'Retir√© des favoris',
    stationAdded: 'Station ajout√©e!',
    fillAllFields: 'Remplir tous les champs',
    invalidURL: 'URL invalide',
    timerSet: 'Minuterie d√©finie pour',
    goodNight: 'Bonne nuit!',
    alarmSet: 'Alarme d√©finie pour',
    alarmCancelled: 'Alarme annul√©e',
    timerCancelled: 'Minuterie annul√©e',
    goodMorning: 'Bonjour! Alarme d√©marr√©e',
    all: 'üåê Tout',
    favorites: '‚ù§Ô∏è Favoris',
    alarm: 'Alarme',
    remaining: 'Restant',
    aboutTitle: '√Ä propos de GrulyaFM',
    aboutLead: 'GrulyaFM ‚Äî radio Internet mondiale. Design et d√©veloppement: Grulya.',
    contactTitle: 'Contact',
    privacyTitle: 'Confidentialit√©',
    privacyShort: 'GrulyaFM ne collecte ni ne transmet vos donn√©es personnelles. Les param√®tres et les stations favorites sont stock√©s uniquement dans votre navigateur ou dans votre compte Supabase.',
    privacyLink: 'En savoir plus sur la politique de confidentialit√©'
  },
  es: {
    subtitle: 'Radio Global ‚Ä¢ 200+ Estaciones',
    bannerTitle: 'üåç Radio Global',
    bannerText: '200+ estaciones de 22 pa√≠ses',
    selectStation: 'Seleccionar una estaci√≥n',
    clickStation: 'Haga clic en una estaci√≥n a continuaci√≥n',
    searchPlaceholder: 'Buscar estaciones...',
    randomStation: 'Estaci√≥n aleatoria',
    settings: 'Configuraci√≥n',
    language: 'Idioma',
    theme: 'Tema',
    darkMode: 'üåô Modo oscuro',
    lightMode: '‚òÄÔ∏è Modo claro',
    visibleCountries: 'Pa√≠ses visibles',
    addStation: 'A√±adir estaci√≥n',
    stationName: 'Nombre de la estaci√≥n',
    streamURL: 'URL de transmisi√≥n',
    save: 'Guardar',
    sleepTimer: 'Temporizador de sue√±o',
    min: 'min',
    hour: 'h',
    hours: 'h',
    cancel: 'Cancelar',
    cancelTimer: 'Cancelar temporizador',
    radioAlarm: 'Alarma de radio',
    time: 'Hora',
    weekdays: ['Dom', 'Lun', 'Mar', 'Mi√©', 'Jue', 'Vie', 'S√°b'],
    station: 'Estaci√≥n',
    setAlarm: 'Establecer alarma',
    cancelAlarm: 'Cancelar alarma',
    connecting: 'Conectando...',
    live: 'En vivo',
    addedToFav: 'A√±adido a favoritos',
    removedFromFav: 'Eliminado de favoritos',
    stationAdded: 'Estaci√≥n a√±adida!',
    fillAllFields: 'Llenar todos los campos',
    invalidURL: 'URL inv√°lida',
    timerSet: 'Temporizador establecido para',
    goodNight: 'Buenas noches!',
    alarmSet: 'Alarma establecida para',
    alarmCancelled: 'Alarma cancelada',
    timerCancelled: 'Temporizador cancelado',
    goodMorning: 'Buenos d√≠as! Alarma iniciada',
    all: 'üåê Todo',
    favorites: '‚ù§Ô∏è Favoritos',
    alarm: 'Alarma',
    remaining: 'Restante',
    aboutTitle: 'Acerca de GrulyaFM',
    aboutLead: 'GrulyaFM ‚Äî radio por Internet global. Dise√±o y desarrollo: Grulya.',
    contactTitle: 'Contacto',
    privacyTitle: 'Privacidad',
    privacyShort: 'GrulyaFM no recopila ni transmite sus datos personales. La configuraci√≥n y las estaciones favoritas se almacenan solo en su navegador o en su cuenta de Supabase.',
    privacyLink: 'M√°s sobre la pol√≠tica de privacidad'
  },
  pt: {
    subtitle: 'R√°dio Global ‚Ä¢ 200+ Esta√ß√µes',
    bannerTitle: 'üåç R√°dio Global',
    bannerText: '200+ esta√ß√µes de 22 pa√≠ses',
    selectStation: 'Selecionar uma esta√ß√£o',
    clickStation: 'Clique em uma esta√ß√£o abaixo',
    searchPlaceholder: 'Pesquisar esta√ß√µes...',
    randomStation: 'Esta√ß√£o aleat√≥ria',
    settings: 'Configura√ß√µes',
    language: 'Idioma',
    theme: 'Tema',
    darkMode: 'üåô Modo escuro',
    lightMode: '‚òÄÔ∏è Modo claro',
    visibleCountries: 'Pa√≠ses vis√≠veis',
    addStation: 'Adicionar esta√ß√£o',
    stationName: 'Nome da esta√ß√£o',
    streamURL: 'URL do stream',
    save: 'Salvar',
    sleepTimer: 'Temporizador de sono',
    min: 'min',
    hour: 'h',
    hours: 'h',
    cancel: 'Cancelar',
    cancelTimer: 'Cancelar temporizador',
    radioAlarm: 'Alarme de r√°dio',
    time: 'Hora',
    weekdays: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'S√°b'],
    station: 'Esta√ß√£o',
    setAlarm: 'Definir alarme',
    cancelAlarm: 'Cancelar alarme',
    connecting: 'Conectando...',
    live: 'Ao vivo',
    addedToFav: 'Adicionado aos favoritos',
    removedFromFav: 'Removido dos favoritos',
    stationAdded: 'Esta√ß√£o adicionada!',
    fillAllFields: 'Preencher todos os campos',
    invalidURL: 'URL inv√°lida',
    timerSet: 'Temporizador definido para',
    goodNight: 'Boa noite!',
    alarmSet: 'Alarme definido para',
    alarmCancelled: 'Alarme cancelado',
    timerCancelled: 'Temporizador cancelado',
    goodMorning: 'Bom dia! Alarme iniciado',
    all: 'üåê Todos',
    favorites: '‚ù§Ô∏è Favoritos',
    alarm: 'Alarme',
    remaining: 'Restante',
    aboutTitle: 'Sobre GrulyaFM',
    aboutLead: 'GrulyaFM ‚Äî r√°dio pela Internet global. Design e desenvolvimento: Grulya.',
    contactTitle: 'Contato',
    privacyTitle: 'Privacidade',
    privacyShort: 'GrulyaFM n√£o coleta nem transmite seus dados pessoais. As configura√ß√µes e esta√ß√µes favoritas s√£o armazenadas apenas no seu navegador ou na sua conta Supabase.',
    privacyLink: 'Mais sobre a pol√≠tica de privacidade'
  },
  it: {
    subtitle: 'Radio Globale ‚Ä¢ 200+ Stazioni',
    bannerTitle: 'üåç Radio Globale',
    bannerText: '200+ stazioni da 22 paesi',
    selectStation: 'Seleziona una stazione',
    clickStation: 'Clicca su una stazione qui sotto',
    searchPlaceholder: 'Cerca stazioni...',
    randomStation: 'Stazione casuale',
    settings: 'Impostazioni',
    language: 'Lingua',
    theme: 'Tema',
    darkMode: 'üåô Modalit√† scura',
    lightMode: '‚òÄÔ∏è Modalit√† chiara',
    visibleCountries: 'Paesi visibili',
    addStation: 'Aggiungi stazione',
    stationName: 'Nome della stazione',
    streamURL: 'URL dello stream',
    save: 'Salva',
    sleepTimer: 'Timer di sonno',
    min: 'min',
    hour: 'ora',
    hours: 'ore',
    cancel: 'Annulla',
    cancelTimer: 'Annulla timer',
    radioAlarm: 'Sveglia radio',
    time: 'Ora',
    weekdays: ['Dom', 'Lun', 'Mar', 'Mer', 'Gio', 'Ven', 'Sab'],
    station: 'Stazione',
    setAlarm: 'Imposta sveglia',
    cancelAlarm: 'Annulla sveglia',
    connecting: 'Connessione...',
    live: 'In diretta',
    addedToFav: 'Aggiunto ai preferiti',
    removedFromFav: 'Rimosso dai preferiti',
    stationAdded: 'Stazione aggiunta!',
    fillAllFields: 'Compila tutti i campi',
    invalidURL: 'URL non valido',
    timerSet: 'Timer impostato per',
    goodNight: 'Buona notte!',
    alarmSet: 'Sveglia impostata per',
    alarmCancelled: 'Sveglia annullata',
    timerCancelled: 'Timer annullato',
    goodMorning: 'Buongiorno! Sveglia avviata',
    all: 'üåê Tutto',
    favorites: '‚ù§Ô∏è Preferiti',
    alarm: 'Sveglia',
    remaining: 'Rimanente',
    aboutTitle: 'Informazioni su GrulyaFM',
    aboutLead: 'GrulyaFM ‚Äî radio Internet globale. Design e sviluppo: Grulya.',
    contactTitle: 'Contatto',
    privacyTitle: 'Privacy',
    privacyShort: 'GrulyaFM non raccoglie n√© trasmette i tuoi dati personali. Le impostazioni e le stazioni preferite vengono archiviate solo nel tuo browser o nel tuo account Supabase.',
    privacyLink: 'Maggiori informazioni sulla politica sulla privacy'
  },
  uk: {
    subtitle: '–ì–ª–æ–±–∞–ª—å–Ω–µ —Ä–∞–¥—ñ–æ ‚Ä¢ 200+ —Å—Ç–∞–Ω—Ü—ñ–π',
    bannerTitle: 'üåç –ì–ª–æ–±–∞–ª—å–Ω–µ —Ä–∞–¥—ñ–æ',
    bannerText: '200+ —Å—Ç–∞–Ω—Ü—ñ–π –∑ 22 –∫—Ä–∞—ó–Ω —Å–≤—ñ—Ç—É',
    selectStation: '–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç–∞–Ω—Ü—ñ—é',
    clickStation: '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —Å—Ç–∞–Ω—Ü—ñ—é –Ω–∏–∂—á–µ',
    searchPlaceholder: '–ü–æ—à—É–∫ —Å—Ç–∞–Ω—Ü—ñ–π...',
    randomStation: '–í–∏–ø–∞–¥–∫–æ–≤–∞ —Å—Ç–∞–Ω—Ü—ñ—è',
    settings: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
    language: '–ú–æ–≤–∞',
    theme: '–¢–µ–º–∞',
    darkMode: 'üåô –¢–µ–º–Ω–∞ —Ç–µ–º–∞',
    lightMode: '‚òÄÔ∏è –°–≤—ñ—Ç–ª–∞ —Ç–µ–º–∞',
    visibleCountries: '–í–∏–¥–∏–º—ñ –∫—Ä–∞—ó–Ω–∏',
    addStation: '–î–æ–¥–∞—Ç–∏ —Å—Ç–∞–Ω—Ü—ñ—é',
    stationName: '–ù–∞–∑–≤–∞ —Å—Ç–∞–Ω—Ü—ñ—ó',
    streamURL: 'URL –ø–æ—Ç–æ–∫—É',
    save: '–ó–±–µ—Ä–µ–≥—Ç–∏',
    sleepTimer: '–¢–∞–π–º–µ—Ä —Å–Ω—É',
    min: '—Ö–≤',
    hour: '–≥–æ–¥',
    hours: '–≥–æ–¥',
    cancel: '–°–∫–∞—Å—É–≤–∞—Ç–∏',
    cancelTimer: '–°–∫–∞—Å—É–≤–∞—Ç–∏ —Ç–∞–π–º–µ—Ä',
    radioAlarm: '–ë—É–¥–∏–ª—å–Ω–∏–∫',
    time: '–ß–∞—Å',
    weekdays: ['–ù–¥', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'],
    station: '–°—Ç–∞–Ω—Ü—ñ—è',
    setAlarm: '–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –±—É–¥–∏–ª—å–Ω–∏–∫',
    cancelAlarm: '–°–∫–∞—Å—É–≤–∞—Ç–∏ –±—É–¥–∏–ª—å–Ω–∏–∫',
    connecting: '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...',
    live: '–ü—Ä—è–º–∏–π –µ—Ñ—ñ—Ä',
    addedToFav: '–î–æ–¥–∞–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–æ–≥–æ',
    removedFromFav: '–í–∏–¥–∞–ª–µ–Ω–æ –∑ –æ–±—Ä–∞–Ω–æ–≥–æ',
    stationAdded: '–°—Ç–∞–Ω—Ü—ñ—é –¥–æ–¥–∞–Ω–æ!',
    fillAllFields: '–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è',
    invalidURL: '–ù–µ–≤—ñ—Ä–Ω–∏–π URL',
    timerSet: '–¢–∞–π–º–µ—Ä –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞',
    goodNight: '–ù–∞ –¥–æ–±—Ä–∞–Ω—ñ—á!',
    alarmSet: '–ë—É–¥–∏–ª—å–Ω–∏–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞',
    alarmCancelled: '–ë—É–¥–∏–ª—å–Ω–∏–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–æ',
    timerCancelled: '–¢–∞–π–º–µ—Ä —Å–∫–∞—Å–æ–≤–∞–Ω–æ',
    goodMorning: '–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! –ë—É–¥–∏–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ',
    all: 'üåê –£—Å—ñ',
    favorites: '‚ù§Ô∏è –û–±—Ä–∞–Ω–µ',
    alarm: '–ë—É–¥–∏–ª—å–Ω–∏–∫',
    remaining: '–ó–∞–ª–∏—à–∏–ª–æ—Å—å',
    aboutTitle: '–ü—Ä–æ GrulyaFM',
    aboutLead: 'GrulyaFM ‚Äî –≥–ª–æ–±–∞–ª—å–Ω–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–∞–¥—ñ–æ. –î–∏–∑–∞–π–Ω —ñ —Ä–æ–∑—Ä–æ–±–∫–∞: Grulya.',
    contactTitle: '–ö–æ–Ω—Ç–∞–∫—Ç–∏',
    privacyTitle: '–ö–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ—Å—Ç—å',
    privacyShort: 'GrulyaFM –Ω–µ –∑–±–∏—Ä–∞—î —ñ –Ω–µ –ø–µ—Ä–µ–¥–∞—î –≤–∞—à—ñ –æ—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ —É–ª—é–±–ª–µ–Ω—ñ —Å—Ç–∞–Ω—Ü—ñ—ó –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –ª–∏—à–µ —É –≤–∞—à–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ –∞–±–æ —É –≤–∞—à–æ–º—É –æ–±–ª—ñ–∫–æ–≤–æ–º—É –∑–∞–ø–∏—Å—ñ Supabase.',
    privacyLink: '–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –ø–æ–ª—ñ—Ç–∏–∫—É –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ'
  },
  zh: {
    subtitle: 'ÂÖ®ÁêÉÁîµÂè∞ ‚Ä¢ 200+ ÁîµÂè∞',
    bannerTitle: 'üåç ÂÖ®ÁêÉÁîµÂè∞',
    bannerText: 'Êù•Ëá™22‰∏™ÂõΩÂÆ∂ÁöÑ200Â§ö‰∏™ÁîµÂè∞',
    selectStation: 'ÈÄâÊã©ÁîµÂè∞',
    clickStation: 'ÁÇπÂáª‰∏ãÈù¢ÁöÑÁîµÂè∞',
    searchPlaceholder: 'ÊêúÁ¥¢ÁîµÂè∞...',
    randomStation: 'ÈöèÊú∫ÁîµÂè∞',
    settings: 'ËÆæÁΩÆ',
    language: 'ËØ≠Ë®Ä',
    theme: '‰∏ªÈ¢ò',
    darkMode: 'üåô Ê∑±Ëâ≤Ê®°Âºè',
    lightMode: '‚òÄÔ∏è ÊµÖËâ≤Ê®°Âºè',
    visibleCountries: 'ÂèØËßÅÂõΩÂÆ∂',
    addStation: 'Ê∑ªÂä†ÁîµÂè∞',
    stationName: 'ÁîµÂè∞ÂêçÁß∞',
    streamURL: 'ÊµÅURL',
    save: '‰øùÂ≠ò',
    sleepTimer: 'Áù°Áú†ÂÆöÊó∂Âô®',
    min: 'ÂàÜÈíü',
    hour: 'Â∞èÊó∂',
    hours: 'Â∞èÊó∂',
    cancel: 'ÂèñÊ∂à',
    cancelTimer: 'ÂèñÊ∂àÂÆöÊó∂Âô®',
    radioAlarm: 'ÁîµÂè∞ÈóπÈíü',
    time: 'Êó∂Èó¥',
    weekdays: ['Êó•', '‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠'],
    station: 'ÁîµÂè∞',
    setAlarm: 'ËÆæÁΩÆÈóπÈíü',
    cancelAlarm: 'ÂèñÊ∂àÈóπÈíü',
    connecting: 'ËøûÊé•‰∏≠...',
    live: 'Áõ¥Êí≠',
    addedToFav: 'Â∑≤Ê∑ªÂä†Âà∞Êî∂Ëóè',
    removedFromFav: 'Â∑≤‰ªéÊî∂Ëóè‰∏≠ÁßªÈô§',
    stationAdded: 'ÁîµÂè∞Â∑≤Ê∑ªÂä†ÔºÅ',
    fillAllFields: 'Â°´ÂÜôÊâÄÊúâÂ≠óÊÆµ',
    invalidURL: 'Êó†ÊïàÁöÑURL',
    timerSet: 'ÂÆöÊó∂Âô®ËÆæÁΩÆ‰∏∫',
    goodNight: 'ÊôöÂÆâÔºÅ',
    alarmSet: 'ÈóπÈíüËÆæÁΩÆ‰∏∫',
    alarmCancelled: 'ÈóπÈíüÂ∑≤ÂèñÊ∂à',
    timerCancelled: 'ÂÆöÊó∂Âô®Â∑≤ÂèñÊ∂à',
    goodMorning: 'Êó©‰∏äÂ•ΩÔºÅÈóπÈíüÂ∑≤ÂêØÂä®',
    all: 'üåê ÂÖ®ÈÉ®',
    favorites: '‚ù§Ô∏è Êî∂Ëóè',
    alarm: 'ÈóπÈíü',
    remaining: 'Ââ©‰Ωô',
    aboutTitle: 'ÂÖ≥‰∫é GrulyaFM',
    aboutLead: 'GrulyaFM ‚Äî ÂÖ®ÁêÉ‰∫íËÅîÁΩëÁîµÂè∞„ÄÇËÆæËÆ°ÂíåÂºÄÂèëÔºöGrulya„ÄÇ',
    contactTitle: 'ËÅîÁ≥ª',
    privacyTitle: 'ÈöêÁßÅ',
    privacyShort: 'GrulyaFM ‰∏çÊî∂ÈõÜÊàñ‰º†ËæìÊÇ®ÁöÑ‰∏™‰∫∫Êï∞ÊçÆ„ÄÇËÆæÁΩÆÂíåÊî∂ËóèÁöÑÁîµÂè∞‰ªÖÂ≠òÂÇ®Âú®ÊÇ®ÁöÑÊµèËßàÂô®Êàñ Supabase Â∏êÊà∑‰∏≠„ÄÇ',
    privacyLink: 'ÊúâÂÖ≥ÈöêÁßÅÊîøÁ≠ñÁöÑÊõ¥Â§ö‰ø°ÊÅØ'
  },
  ja: {
    subtitle: '„Ç∞„É≠„Éº„Éê„É´„É©„Ç∏„Ç™ ‚Ä¢ 200‰ª•‰∏ä„ÅÆÂ±Ä',
    bannerTitle: 'üåç „Ç∞„É≠„Éº„Éê„É´„É©„Ç∏„Ç™',
    bannerText: '22„Ç´ÂõΩ„Åã„Çâ200‰ª•‰∏ä„ÅÆÂ±Ä',
    selectStation: '„Çπ„ÉÜ„Éº„Ç∑„Éß„É≥„ÇíÈÅ∏Êäû',
    clickStation: '‰∏ã„ÅÆ„Çπ„ÉÜ„Éº„Ç∑„Éß„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ',
    searchPlaceholder: '„Çπ„ÉÜ„Éº„Ç∑„Éß„É≥„ÇíÊ§úÁ¥¢...',
    randomStation: '„É©„É≥„ÉÄ„É†„Çπ„ÉÜ„Éº„Ç∑„Éß„É≥',
    settings: 'Ë®≠ÂÆö',
    language: 'Ë®ÄË™û',
    theme: '„ÉÜ„Éº„Éû',
    darkMode: 'üåô „ÉÄ„Éº„ÇØ„É¢„Éº„Éâ',
    lightMode: '‚òÄÔ∏è „É©„Ç§„Éà„É¢„Éº„Éâ',
    visibleCountries: 'Ë°®Á§∫ÂõΩ',
    addStation: '„Çπ„ÉÜ„Éº„Ç∑„Éß„É≥„ÇíËøΩÂä†',
    stationName: '„Çπ„ÉÜ„Éº„Ç∑„Éß„É≥Âêç',
    streamURL: '„Çπ„Éà„É™„Éº„É†URL',
    save: '‰øùÂ≠ò',
    sleepTimer: '„Çπ„É™„Éº„Éó„Çø„Ç§„Éû„Éº',
    min: 'ÂàÜ',
    hour: 'ÊôÇÈñì',
    hours: 'ÊôÇÈñì',
    cancel: '„Ç≠„É£„É≥„Çª„É´',
    cancelTimer: '„Çø„Ç§„Éû„Éº„Çí„Ç≠„É£„É≥„Çª„É´',
    radioAlarm: '„É©„Ç∏„Ç™„Ç¢„É©„Éº„É†',
    time: 'ÊôÇÈñì',
    weekdays: ['Êó•', 'Êúà', 'ÁÅ´', 'Ê∞¥', 'Êú®', 'Èáë', 'Âúü'],
    station: '„Çπ„ÉÜ„Éº„Ç∑„Éß„É≥',
    setAlarm: '„Ç¢„É©„Éº„É†„ÇíË®≠ÂÆö',
    cancelAlarm: '„Ç¢„É©„Éº„É†„Çí„Ç≠„É£„É≥„Çª„É´',
    connecting: 'Êé•Á∂ö‰∏≠...',
    live: '„É©„Ç§„Éñ',
    addedToFav: '„ÅäÊ∞ó„Å´ÂÖ•„Çä„Å´ËøΩÂä†',
    removedFromFav: '„ÅäÊ∞ó„Å´ÂÖ•„Çä„Åã„ÇâÂâäÈô§',
    stationAdded: '„Çπ„ÉÜ„Éº„Ç∑„Éß„É≥„ÅåËøΩÂä†„Åï„Çå„Åæ„Åó„ÅüÔºÅ',
    fillAllFields: '„Åô„Åπ„Å¶„ÅÆ„Éï„Ç£„Éº„É´„Éâ„ÇíÂÖ•Âäõ',
    invalidURL: 'ÁÑ°Âäπ„Å™URL',
    timerSet: '„Çø„Ç§„Éû„Éº„ÇíË®≠ÂÆö',
    goodNight: '„Åä„ÇÑ„Åô„Åø„Å™„Åï„ÅÑÔºÅ',
    alarmSet: '„Ç¢„É©„Éº„É†„ÇíË®≠ÂÆö',
    alarmCancelled: '„Ç¢„É©„Éº„É†„Åå„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü',
    timerCancelled: '„Çø„Ç§„Éû„Éº„Åå„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü',
    goodMorning: '„Åä„ÅØ„Çà„ÅÜÔºÅ„Ç¢„É©„Éº„É†„ÅåÈñãÂßã„Åï„Çå„Åæ„Åó„Åü',
    all: 'üåê „Åô„Åπ„Å¶',
    favorites: '‚ù§Ô∏è „ÅäÊ∞ó„Å´ÂÖ•„Çä',
    alarm: '„Ç¢„É©„Éº„É†',
    remaining: 'ÊÆã„Çä',
    aboutTitle: 'GrulyaFM„Å´„Å§„ÅÑ„Å¶',
    aboutLead: 'GrulyaFM ‚Äî „Ç∞„É≠„Éº„Éê„É´„Ç§„É≥„Çø„Éº„Éç„ÉÉ„Éà„É©„Ç∏„Ç™„ÄÇ„Éá„Ç∂„Ç§„É≥„Å®ÈñãÁô∫ÔºöGrulya„ÄÇ',
    contactTitle: 'ÈÄ£Áµ°ÂÖà',
    privacyTitle: '„Éó„É©„Ç§„Éê„Ç∑„Éº',
    privacyShort: 'GrulyaFM„ÅØÂÄã‰∫∫„Éá„Éº„Çø„ÇíÂèéÈõÜ„Åæ„Åü„ÅØÈÄÅ‰ø°„Åó„Åæ„Åõ„Çì„ÄÇË®≠ÂÆö„Å®„ÅäÊ∞ó„Å´ÂÖ•„Çä„ÅÆ„Çπ„ÉÜ„Éº„Ç∑„Éß„É≥„ÅØ„ÄÅ„Éñ„É©„Ç¶„Ç∂„Åæ„Åü„ÅØSupabase„Ç¢„Ç´„Ç¶„É≥„Éà„Å´„ÅÆ„Åø‰øùÂ≠ò„Åï„Çå„Åæ„Åô„ÄÇ',
    privacyLink: '„Éó„É©„Ç§„Éê„Ç∑„Éº„Éù„É™„Ç∑„Éº„ÅÆË©≥Á¥∞'
  }
};

const LANGUAGE_NAMES = {
  en: ' English',
  ru: ' –†—É—Å—Å–∫–∏–π',
  de: ' Deutsch',
  fr: ' Fran√ßais',
  es: ' Espa√±ol',
  pt: ' Portugu√™s',
  it: ' Italiano',
  uk: ' –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
  zh: ' ‰∏≠Êñá',
  ja: ' Êó•Êú¨Ë™û'
};

const COUNTRY_NAMES = {
  GB: 'United Kingdom',
  FR: 'France',
  DE: 'Germany',
  ES: 'Spain',
  PT: 'Portugal',
  US: 'United States',
  UA: 'Ukraine',
  IT: 'Italy',
  NL: 'Netherlands',
  SE: 'Sweden',
  NO: 'Norway',
  PL: 'Poland',
  TR: 'Turkey',
  BR: 'Brazil',
  MX: 'Mexico',
  RU: "Russia",
  AR: 'Argentina',
  CA: 'Canada',
  AU: 'Australia',
  JP: 'Japan',
  CN: 'China',
  IN: 'India',
  MY: 'My Stations'
};

// Application State
const state = {
  currentStation: null,
  isPlaying: false,
  volume: 70,
  favorites: [],
  searchQuery: '',
  activeTab: 'all',
  enabledCountries: Object.keys(COUNTRY_NAMES).filter(c => c !== 'MY'),
  isDarkTheme: true,
  language: 'en',
  myStations: [],
  alarm: null,
  sleepTimer: null,
  compact: false // –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Å–ø–∏—Å–∫–∞
};

// ===== Supabase auth & cloud sync =====
// –ü–û–õ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° SUPABASE
// ============================================

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getCurrentUser() {
  try {
    const { data } = await window.supabase.auth.getUser();
    return data?.user || null;
  } catch (error) {
    console.error('Error getting user:', error);
    return null;
  }
}

// –°–û–•–†–ê–ù–ò–¢–¨ –í–°–Å –í SUPABASE
async function saveToSupabase() {
  try {
    const user = await getCurrentUser();
    if (!user) {
      console.log('No user - saving only to localStorage');
      return;
    }

    const userData = {
      user_id: user.id,
      favorites: state.favorites || [],
      custom_stations: state.myStations || [],
      settings: {
        volume: state.volume,
        enabledCountries: state.enabledCountries,
        isDarkTheme: state.isDarkTheme,
        language: state.language,
        alarm: state.alarm,
        compact: state.compact,
        activeTab: state.activeTab
      }
    };

    console.log('üíæ Saving to Supabase:', userData);

    // UPSERT - —Å–æ–∑–¥–∞—Å—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç
    const { data, error } = await window.supabase
      .from('user_data')
      .upsert(userData, { 
        onConflict: 'user_id',
        returning: 'minimal'
      });

    if (error) {
      console.error('‚ùå Supabase save error:', error);
      showToast('‚ö†Ô∏è Sync error: ' + error.message);
    } else {
      console.log('‚úÖ Saved to Supabase successfully');
      showToast('‚úÖ Synced to cloud');
    }
  } catch (error) {
    console.error('‚ùå Save exception:', error);
    showToast('‚ö†Ô∏è Sync failed');
  }
}

// –ó–ê–ì–†–£–ó–ò–¢–¨ –í–°–Å –ò–ó SUPABASE
async function loadFromSupabase() {
  try {
    const user = await getCurrentUser();
    if (!user) {
      console.log('No user - loading only from localStorage');
      return false;
    }

    console.log('‚òÅÔ∏è Loading from Supabase for user:', user.id);

    const { data, error } = await window.supabase
      .from('user_data')
      .select('*')
      .eq('user_id', user.id)
      .single();

    if (error) {
      if (error.code === 'PGRST116') {
        // No data yet - first time user
        console.log('üìù No cloud data yet - will create on first save');
        return false;
      }
      console.error('‚ùå Supabase load error:', error);
      return false;
    }

    if (!data) {
      console.log('No data returned');
      return false;
    }

    console.log('‚úÖ Loaded from Supabase:', data);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞
    if (data.favorites) state.favorites = data.favorites;
    if (data.custom_stations) {
      state.myStations = data.custom_stations;
      allStations.MY = state.myStations;
    }
    
    if (data.settings) {
      const s = data.settings;
      if (s.volume !== undefined) state.volume = s.volume;
      if (s.enabledCountries) state.enabledCountries = s.enabledCountries;
      if (s.isDarkTheme !== undefined) state.isDarkTheme = s.isDarkTheme;
      if (s.language) state.language = s.language;
      if (s.alarm) state.alarm = s.alarm;
      if (s.compact !== undefined) state.compact = s.compact;
      if (s.activeTab) state.activeTab = s.activeTab;
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ UI
    audio.volume = state.volume / 100;
    document.getElementById('volumeFill').style.width = `${state.volume}%`;
    
    if (!state.isDarkTheme) {
      document.body.classList.add('light-theme');
    }

    if (state.alarm) {
      updateAlarmDisplay();
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ —Ç–æ–∂–µ
    saveToLocalStorage();
    
    showToast('‚òÅÔ∏è Loaded from cloud');
    return true;

  } catch (error) {
    console.error('‚ùå Load exception:', error);
    return false;
  }
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ localStorage (–±—ã—Å—Ç—Ä–æ–µ, –¥–ª—è UI)
function saveToLocalStorage() {
  try {
    localStorage.setItem('grulyafm_state', JSON.stringify({
      favorites: state.favorites,
      volume: state.volume,
      enabledCountries: state.enabledCountries,
      isDarkTheme: state.isDarkTheme,
      language: state.language,
      myStations: state.myStations,
      alarm: state.alarm,
      compact: state.compact,
      activeTab: state.activeTab
    }));
  } catch (error) {
    console.error('localStorage save error:', error);
  }
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
function loadFromLocalStorage() {
  try {
    const saved = localStorage.getItem('grulyafm_state');
    if (!saved) return false;

    const savedState = JSON.parse(saved);
    state.favorites = savedState.favorites || [];
    state.volume = savedState.volume || 70;
    state.enabledCountries = savedState.enabledCountries || state.enabledCountries;
    state.isDarkTheme = savedState.isDarkTheme !== false;
    state.language = savedState.language || 'en';
    state.myStations = savedState.myStations || [];
    state.alarm = savedState.alarm || null;
    state.compact = savedState.compact === true;
    state.activeTab = savedState.activeTab || 'all';

    if (!state.isDarkTheme) {
      document.body.classList.add('light-theme');
    }

    audio.volume = state.volume / 100;
    document.getElementById('volumeFill').style.width = `${state.volume}%`;

    if (state.alarm) {
      updateAlarmDisplay();
    }

    return true;
  } catch (error) {
    console.error('localStorage load error:', error);
    return false;
  }
}

// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø
// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –ª–æ–∫–∞–ª—å–Ω–æ, –∏ –≤ –æ–±–ª–∞–∫–æ
function saveToStorage() {
  // –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ (–±—ã—Å—Ç—Ä–æ)
  saveToLocalStorage();
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –æ–±–ª–∞–∫–æ–º (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç UI)
  saveToSupabase().catch(err => console.error('Sync error:', err));
}

// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò
// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑ –æ–±–ª–∞–∫–∞, fallback –Ω–∞ localStorage
async function loadFromStorage() {
  console.log('üìÇ Loading user data...');
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ–±–ª–∞–∫–∞
  const loadedFromCloud = await loadFromSupabase();
  
  if (!loadedFromCloud) {
    // Fallback –Ω–∞ localStorage
    console.log('üìÇ Loading from localStorage...');
    loadFromLocalStorage();
  }
}

// –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
window.supabase?.auth.onAuthStateChange(async (event, session) => {
  console.log('üîê Auth state changed:', event);
  
  if (event === 'SIGNED_IN') {
    showToast('üîì Signed in!');
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞
    await loadFromSupabase();
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    if (typeof updateUI === 'function') {
      updateUI();
    }
    if (typeof renderTabs === 'function') {
      renderTabs();
    }
    if (typeof renderStations === 'function') {
      renderStations();
    }
  } else if (event === 'SIGNED_OUT') {
    showToast('üö™ Signed out');
  } else if (event === 'TOKEN_REFRESHED') {
    console.log('üîÑ Token refreshed');
  }
});

// –ö–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
document.getElementById('btnSyncNow')?.addEventListener('click', async () => {
  showToast('üîÑ Syncing...');
  await saveToSupabase();
});

// Sign out button
document.getElementById('btnSignOut')?.addEventListener('click', async () => {
  await window.supabase.auth.signOut();
  showToast('üëã –í—ã –≤—ã—à–ª–∏');
});

document.getElementById('btnSyncNow')?.addEventListener('click', async () => {
  await saveToSupabase();
});

console.log('‚úÖ Supabase sync module loaded');

const audio = document.getElementById('audio');

// Wake Lock –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞ –≤–æ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
let wakeLock = null;

// Global stations object
let allStations = {};

// === CORS proxy + HLS helpers (auto-injected) ===
const proxify = (url) => `/api/radio-proxy?url=${encodeURIComponent(url)}`;
const isHls   = (url) => typeof url === 'string' && /\.m3u8(\?|$)/i.test(url);
function setStream(audioEl, url){
  const src = proxify(url);
  if (isHls(url)){
    import('./hls-helper.js').then(mod => {
      if (mod && typeof mod.setupHls === 'function'){
        mod.setupHls(audioEl, src);
      } else {
        audioEl.src = src;
      }
    }).catch(()=>{
      audioEl.src = src;
    });
  } else {
    audioEl.src = src;
  }
}
// === end helpers ===

const visualizer = document.getElementById('visualizer');

// Initialize visualizer bars
for (let i = 0; i < 30; i++) {
  const bar = document.createElement('div');
  bar.className = 'bar';
  visualizer.appendChild(bar);
}

// Translation helper
function t(key) {
  return TRANSLATIONS[state.language][key] || TRANSLATIONS['en'][key] || key;
}

// Show toast notification
function showToast(message) {
  const toast = document.createElement('div');
  toast.className = 'toast';
  toast.textContent = message;
  document.body.appendChild(toast);
  setTimeout(() => toast.remove(), 3000);
}

// === WAKE LOCK API –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞ ===
async function requestWakeLock() {
  try {
    if ('wakeLock' in navigator) {
      wakeLock = await navigator.wakeLock.request('screen');
      console.log('‚úÖ Wake Lock –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');

      wakeLock.addEventListener('release', () => {
        console.log('‚ö†Ô∏è Wake Lock –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω');
      });
    }
  } catch (err) {
    console.log('‚ùå Wake Lock –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω:', err);
  }
}

async function releaseWakeLock() {
  if (wakeLock !== null) {
    try {
      await wakeLock.release();
      wakeLock = null;
      console.log('‚úÖ Wake Lock –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –≤—Ä—É—á–Ω—É—é');
    } catch (err) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è Wake Lock:', err);
    }
  }
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Wake Lock –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
document.addEventListener('visibilitychange', async () => {
  if (wakeLock !== null && document.visibilityState === 'visible' && state.isPlaying) {
    await requestWakeLock();
  }
});

// === MEDIA SESSION API –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è ===
function updateMediaSession(station) {
  if ('mediaSession' in navigator && station) {
    navigator.mediaSession.metadata = new MediaMetadata({
      title: station.name,
      artist: `${station.country} ‚Ä¢ GrulyaFM`,
      album: 'Global Radio',
      artwork: [
        { src: '/icon-96.png', sizes: '96x96', type: 'image/png' },
        { src: '/icon-192.png', sizes: '192x192', type: 'image/png' },
        { src: '/icon-512.png', sizes: '512x512', type: 'image/png' }
      ]
    });

    navigator.mediaSession.setActionHandler('play', () => {
      audio.play();
      state.isPlaying = true;
      document.getElementById('playBtn').textContent = '‚è∏Ô∏è';
      updateMiniPlayer();
    });

    navigator.mediaSession.setActionHandler('pause', async () => {
      audio.pause();
      state.isPlaying = false;
      document.getElementById('playBtn').textContent = '‚ñ∂Ô∏è';
      await releaseWakeLock();
      updateMiniPlayer();
    });

    navigator.mediaSession.setActionHandler('stop', async () => {
      audio.pause();
      state.isPlaying = false;
      document.getElementById('playBtn').textContent = '‚ñ∂Ô∏è';
      await releaseWakeLock();
      updateMiniPlayer();
    });

    console.log('‚úÖ Media Session –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è:', station.name);
  }
}

// Load stations from stations.json
async function loadStations() {
  try {
    const response = await fetch('stations.json');
    const data = await response.json();
    allStations = data.stations || {};
    allStations.MY = state.myStations;
    renderTabs();
    renderStations();
    showToast('üéµ ' + t('bannerText'));
  } catch (error) {
    console.error('Error loading stations:', error);
    showToast('‚ùå Error loading stations.json');
    allStations = { MY: state.myStations };
  }
}

// Load state from localStorage
function loadFromStorage() {
  try {
    const saved = localStorage.getItem('grulyafm_state');
    if (saved) {
      const savedState = JSON.parse(saved);
      state.favorites = savedState.favorites || [];
      state.volume = savedState.volume || 70;
      state.enabledCountries = savedState.enabledCountries || state.enabledCountries;
      state.isDarkTheme = savedState.isDarkTheme !== false;
      state.language = savedState.language || 'ru';
      state.myStations = savedState.myStations || [];
      state.alarm = savedState.alarm || null;
      state.compact = savedState.compact === true;

      if (!state.isDarkTheme) {
        document.body.classList.add('light-theme');
        const themeToggle = document.getElementById('themeToggle');
        const checkbox = themeToggle?.querySelector('.checkbox');
        if (checkbox) checkbox.classList.remove('checked');
      }

      audio.volume = state.volume / 100;
      document.getElementById('volumeFill').style.width = `${state.volume}%`;

      if (state.alarm) {
        updateAlarmDisplay();
      }
    }
  } catch (error) {
    console.error('Error loading state:', error);
  }
}

// Save state to localStorage
function saveToStorage() {
  try {
    localStorage.setItem('grulyafm_state', JSON.stringify({
      favorites: state.favorites,
      volume: state.volume,
      enabledCountries: state.enabledCountries,
      isDarkTheme: state.isDarkTheme,
      language: state.language,
      myStations: state.myStations,
      alarm: state.alarm,
      compact: state.compact
    }));
    // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî —Å–∏–Ω–∫–Ω–µ–º –≤ —Ñ–æ–Ω–µ (–Ω–µ –º–µ—à–∞–µ—Ç UX)
    getCurrentUser().then(u => { if (u) saveUserStateToCloud(); });
  } catch (error) {
    console.error('Error saving state:', error);
  }
}

// Get filtered stations
function getFilteredStations() {
  let stations = [];
  state.enabledCountries.forEach(country => {
    if (allStations[country]) {
      stations.push(...allStations[country].map((s, index) => ({
        ...s,
        country,
        id: `${country}-${index}`
      })));
    }
  });

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –æ–±–ª–∞–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  getCurrentUser().then(u => { if (u) saveToSupabase(); });

  if (state.searchQuery) {
    stations = stations.filter(s =>
      s.name.toLowerCase().includes(state.searchQuery.toLowerCase())
    );
  }

  if (state.activeTab === 'favorites') {
    stations = stations.filter(s => state.favorites.includes(s.id));
  } else if (state.activeTab !== 'all') {
    stations = stations.filter(s => s.country === state.activeTab);
  }

  return stations;
}

// Render stations list
function renderStations() {
  const stations = getFilteredStations();
  const list = document.getElementById('stationsList');

  if (stations.length === 0) {
    list.innerHTML = `<div style="text-align:center;padding:40px;color:var(--muted)">${t('clickStation')}</div>`;
    return;
  }

  list.innerHTML = stations.map(s => `
    <div class="station-card ${state.compact ? 'compact' : ''} ${state.currentStation?.id === s.id ? 'playing' : ''}" data-id="${s.id}">
      <div class="station-icon">üìª</div>
      <div class="station-details">
        <div class="station-title">${s.name}</div>
        <div class="station-country">${s.country} ‚Ä¢ ${s.bitrate ?? 128} kbps</div>
      </div>
      <button class="fav-btn ${state.favorites.includes(s.id) ? 'active' : ''}" data-id="${s.id}">
        ${state.favorites.includes(s.id) ? '‚ù§Ô∏è' : 'ü§ç'}
      </button>
      ${s.country === 'MY' ? `<button class="delete-btn" title="Delete" data-url="${s.url}">üóëÔ∏è</button>` : ``}
    </div>
  `).join('');

  list.querySelectorAll('.station-card').forEach(card => {
    card.addEventListener('click', (e) => {
      if (e.target.classList.contains('fav-btn') || e.target.classList.contains('delete-btn')) return;
      const id = card.dataset.id;
      const station = stations.find(s => s.id === id);
      playStation(station);
    });
  });

  list.querySelectorAll('.fav-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.stopPropagation();
      const id = btn.dataset.id;
      toggleFavorite(id);
    });
  });

  list.querySelectorAll('.delete-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.stopPropagation();
      const url = btn.dataset.url;
      if (confirm('Delete this station?')) {
        deleteMyStation(url);
      }
    });
  });
}

// Render tabs
function renderTabs() {
  const tabs = document.getElementById('tabs');
  const categories = ['all', 'favorites', ...state.enabledCountries];

  tabs.innerHTML = categories.map(cat => {
    let label = '';
    if (cat === 'all') label = t('all');
    else if (cat === 'favorites') label = t('favorites');
    else label = cat;

    return `<button class="tab ${cat === state.activeTab ? 'active' : ''}" data-category="${cat}">${label}</button>`;
  }).join('');

  tabs.querySelectorAll('.tab').forEach(tab => {
    tab.addEventListener('click', () => {
      state.activeTab = tab.dataset.category;
      renderTabs();
      renderStations();
    });
  });
}

// Play station
function playStation(station) {
  state.currentStation = station;
  setStream(audio, station.url);

  document.getElementById('stationName').textContent = station.name;
  document.getElementById('trackMetadata').textContent = t('connecting');

  audio.play().then(async () => {
    state.isPlaying = true;
    document.getElementById('playBtn').textContent = '‚è∏Ô∏è';
    document.getElementById('trackMetadata').textContent = `${station.country} ‚Ä¢ ${t('live')} ‚Ä¢ ${station.bitrate ?? 128} kbps`;
    showToast(`‚ñ∂Ô∏è ${station.name}`);

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º Wake Lock –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞
    await requestWakeLock();

    // –û–±–Ω–æ–≤–ª—è–µ–º Media Session –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    updateMediaSession(station);

    renderStations();
    updateMiniPlayer();
  }).catch(() => {
    showToast('‚ùå ' + t('connecting'));
    state.isPlaying = false;
    document.getElementById('playBtn').textContent = '‚ñ∂Ô∏è';
    updateMiniPlayer();
  });
}

// Toggle favorite
function toggleFavorite(id) {
  const index = state.favorites.indexOf(id);
  if (index > -1) {
    state.favorites.splice(index, 1);
    showToast('üíî ' + t('removedFromFav'));
  } else {
    state.favorites.push(id);
    showToast('‚ù§Ô∏è ' + t('addedToFav'));
  }
  saveToStorage();
  renderStations();
}

// Render language grid
function renderLanguageGrid() {
  const grid = document.getElementById('languageGrid');
  grid.innerHTML = Object.keys(LANGUAGE_NAMES).map(lang => `
    <div class="lang-item ${state.language === lang ? 'active' : ''}" data-lang="${lang}">
      ${LANGUAGE_NAMES[lang]}
    </div>
  `).join('');

  grid.querySelectorAll('.lang-item').forEach(item => {
    item.addEventListener('click', () => {
      state.language = item.dataset.lang;
      saveToStorage();
      renderLanguageGrid();
      updateUI();
      showToast(`üåç ${LANGUAGE_NAMES[item.dataset.lang]}`);
    });
  });
}

// Render countries settings
function renderCountriesSettings() {
  const container = document.getElementById('countriesSettings');
  container.innerHTML = Object.keys(COUNTRY_NAMES).filter(c => c !== 'MY').map(code => `
    <div class="setting-item" style="cursor:pointer;" data-country="${code}">
      <div style="display:flex;align-items:center;gap:8px;">
        <div class="checkbox ${state.enabledCountries.includes(code) ? 'checked' : ''}"></div>
        <span>${COUNTRY_NAMES[code]}</span>
      </div>
    </div>
  `).join('');

  container.querySelectorAll('.setting-item').forEach(item => {
    item.addEventListener('click', () => {
      const country = item.dataset.country;
      const checkbox = item.querySelector('.checkbox');

      if (state.enabledCountries.includes(country)) {
        state.enabledCountries = state.enabledCountries.filter(c => c !== country);
        checkbox.classList.remove('checked');
      } else {
        state.enabledCountries.push(country);
        checkbox.classList.add('checked');
      }

      saveToStorage();
      renderTabs();
      renderStations();
    });
  });
}

// Update UI with current language
function updateUI() {
  document.getElementById('subtitle').textContent = t('subtitle');
  document.getElementById('bannerTitle').textContent = t('bannerTitle');
  document.getElementById('bannerText').textContent = t('bannerText');
  document.getElementById('stationName').textContent = state.currentStation ? state.currentStation.name : t('selectStation');
  document.getElementById('trackMetadata').textContent = state.currentStation ? `${state.currentStation.country} ‚Ä¢ ${t('live')} ‚Ä¢ ${state.currentStation.bitrate ?? 128} kbps` : t('clickStation');
  document.getElementById('searchInput').placeholder = t('searchPlaceholder');
  document.getElementById('randomBtnText').textContent = t('randomStation');

  // Modal titles
  document.getElementById('settingsTitle').textContent = `‚öôÔ∏è ${t('settings')}`;
  document.getElementById('addStationTitle').textContent = `‚ûï ${t('addStation')}`;
  document.getElementById('timerTitle').textContent = `üí§ ${t('sleepTimer')}`;
  document.getElementById('alarmModalTitle').textContent = `‚è∞ ${t('radioAlarm')}`;

  // Section titles
  document.getElementById('languageTitle').textContent = `üåç ${t('language')}`;
  document.getElementById('themeTitle').textContent = `üé® ${t('theme')}`;
  document.getElementById('countriesTitle').textContent = `üåé ${t('visibleCountries')}`;

  // Input labels
  document.getElementById('stationNameLabel').textContent = t('stationName');
  document.getElementById('stationUrlLabel').textContent = t('streamURL');
  document.getElementById('alarmTimeLabel').textContent = t('time');
  document.getElementById('alarmDaysLabel').textContent = t('weekdays').join(', ');
  document.getElementById('alarmStationLabel').textContent = t('station');

  // Button texts
  document.getElementById('saveStationText').textContent = t('save');
  document.getElementById('setAlarmText').textContent = t('setAlarm');
  document.getElementById('cancelAlarmText').textContent = t('cancelAlarm');
  document.getElementById('cancelTimerText').textContent = t('cancelTimer');
  document.getElementById('themeText').textContent = state.isDarkTheme ? t('darkMode') : t('lightMode');

  // Timer labels
  document.querySelectorAll('.min-label').forEach(el => el.textContent = t('min'));
  document.querySelectorAll('.hour-label').forEach(el => el.textContent = t('hour'));

  // About modal texts
  const aboutTitle = document.getElementById('aboutTitle');
  const aboutLead = document.getElementById('aboutLead');
  const contactTitle = document.getElementById('contactTitle');
  const privacyTitle = document.getElementById('privacyTitle');
  const privacyShort = document.getElementById('privacyShort');
  const privacyLink = document.getElementById('privacyLink');

  if (aboutTitle) aboutTitle.textContent = `‚ÑπÔ∏è ${t('aboutTitle')}`;
  if (aboutLead) aboutLead.textContent = t('aboutLead');
  if (contactTitle) contactTitle.textContent = `üì´ ${t('contactTitle')}`;
  if (privacyTitle) privacyTitle.textContent = `üîí ${t('privacyTitle')}`;
  if (privacyShort) privacyShort.textContent = t('privacyShort');
  if (privacyLink) {
    privacyLink.textContent = `üìÑ ${t('privacyLink')}`;
    // Update link to include current language
    privacyLink.href = `privacy-policy.html?lang=${state.language}`;
  }

  renderWeekdays();
  renderTabs();
  renderStations();
  updateMiniPlayer();
}

// Render weekdays
function renderWeekdays() {
  const container = document.getElementById('weekdays');
  const weekdays = t('weekdays');
  container.innerHTML = [1, 2, 3, 4, 5, 6, 0].map(day => `
    <div class="weekday ${state.alarm && state.alarm.days && state.alarm.days.includes(day) ? 'active' : ''}" data-day="${day}">
      ${weekdays[day]}
    </div>
  `).join('');

  container.querySelectorAll('.weekday').forEach(item => {
    item.addEventListener('click', () => {
      item.classList.toggle('active');
    });
  });
}

// === NOTIFICATION API –¥–ª—è –±—É–¥–∏–ª—å–Ω–∏–∫–∞ ===
async function requestNotificationPermission() {
  if ('Notification' in window && Notification.permission === 'default') {
    try {
      const permission = await Notification.requestPermission();
      console.log('üì¢ Notification permission:', permission);
      return permission === 'granted';
    } catch (err) {
      console.log('‚ùå Notification permission error:', err);
      return false;
    }
  }
  return Notification.permission === 'granted';
}

function showAlarmNotification(stationName) {
  if ('Notification' in window && Notification.permission === 'granted') {
    const notification = new Notification('‚è∞ GrulyaFM –ë—É–¥–∏–ª—å–Ω–∏–∫', {
      body: `${t('goodMorning')}\nüéµ ${stationName}`,
      icon: '/icon-192.png',
      badge: '/icon-96.png',
      tag: 'alarm',
      requireInteraction: true,
      vibrate: [200, 100, 200, 100, 200]
    });

    notification.onclick = () => {
      window.focus();
      notification.close();
    };
  }
}

// Check alarm
function checkAlarm() {
  if (!state.alarm) return;

  const now = new Date();
  const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
  const currentDay = now.getDay();

  if (currentTime === state.alarm.time && state.alarm.days && state.alarm.days.includes(currentDay)) {
    const stations = getFilteredStations();
    const station = stations.find(s => s.id === state.alarm.stationId);
    if (station) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      showAlarmNotification(station.name);

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω—Ü–∏—é
      playStation(station);
      showToast('‚è≤Ô∏è ' + t('goodMorning'));
    }
  }
}

// Update alarm display
function updateAlarmDisplay() {
  if (state.alarm) {
    const weekdays = t('weekdays');
    const daysText = state.alarm.days ? state.alarm.days.map(d => weekdays[d]).join(', ') : '';
    document.getElementById('alarmText').textContent = `‚è≤Ô∏è ${t('alarm')}: ${state.alarm.time}`;
    document.getElementById('alarmDays').textContent = `üìÖ ${daysText}`;
    document.getElementById('alarmDisplay').classList.add('active');
  } else {
    document.getElementById('alarmDisplay').classList.remove('active');
  }
}

// === Mini Player ===
function updateMiniPlayer() {
  const mini = document.getElementById('miniPlayer');
  const miniTitle = document.getElementById('miniTitle');
  const miniMeta = document.getElementById('miniMeta');
  const miniPlay = document.getElementById('miniPlay');

  if (!state.currentStation) {
    if (mini) mini.classList.add('hidden');
    return;
  }

  if (mini) mini.classList.remove('hidden');
  if (miniTitle) miniTitle.textContent = state.currentStation.name;
  if (miniMeta) miniMeta.textContent = `${state.currentStation.country} ‚Ä¢ ${t('live')} ‚Ä¢ ${state.currentStation.bitrate ?? 128} kbps`;
  if (miniPlay) miniPlay.textContent = state.isPlaying ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è';
}

/* -------------------------------------------
   CUSTOM SELECT for Alarm Station (Glass UI)
   ------------------------------------------- */
function buildAlarmCustomSelect(stations) {
  const nativeSelect = document.getElementById('alarmStation'); // hidden
  const wrapper = document.getElementById('alarmStationCSelect');
  const selected = document.getElementById('csel-selected');
  const optionsBox = document.getElementById('csel-options');

  if (!nativeSelect || !wrapper || !selected || !optionsBox) return;

  // fill native select (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ª–æ–≥–∏–∫–æ–π setAlarm)
  nativeSelect.innerHTML = stations.map(s => `<option value="${s.id}">${s.name}</option>`).join('');

  // choose current
  let currentId = nativeSelect.value || stations[0]?.id || '';
  nativeSelect.value = currentId;

  // build custom list
  if (!stations.length) {
    optionsBox.innerHTML = `<div class="cselect-empty">${t('clickStation')}</div>`;
    selected.textContent = '‚Äî';
    return;
  }

  optionsBox.innerHTML = stations.map(s => `
    <div class="cselect-option ${s.id===currentId?'active':''}" data-id="${s.id}" title="${s.name}">${s.name}</div>
  `).join('');

  const current = stations.find(s => s.id === currentId) || stations[0];
  selected.textContent = current?.name || '‚Äî';

  // open/close handlers
  const closeAll = () => wrapper.classList.remove('open');
  selected.onclick = (e) => { e.stopPropagation(); wrapper.classList.toggle('open'); };
  optionsBox.querySelectorAll('.cselect-option').forEach(opt => {
    opt.addEventListener('click', () => {
      const id = opt.dataset.id;
      nativeSelect.value = id;
      selected.textContent = stations.find(s => s.id === id)?.name || '‚Äî';
      optionsBox.querySelectorAll('.cselect-option').forEach(o => o.classList.remove('active'));
      opt.classList.add('active');
      closeAll();
    });
  });
  document.addEventListener('click', closeAll, { once:true });
}

// Event Listeners

// Random Station Button
document.getElementById('randomBtn').addEventListener('click', () => {
  const stations = getFilteredStations();
  if (stations.length > 0) {
    const randomStation = stations[Math.floor(Math.random() * stations.length)];
    playStation(randomStation);
  }
});

// Play/Pause Button
document.getElementById('playBtn').addEventListener('click', async () => {
  if (!state.currentStation) return showToast(t('selectStation'));

  if (state.isPlaying) {
    audio.pause();
    state.isPlaying = false;
    document.getElementById('playBtn').textContent = '‚ñ∂Ô∏è';
    await releaseWakeLock();
  } else {
    await audio.play();
    state.isPlaying = true;
    document.getElementById('playBtn').textContent = '‚è∏Ô∏è';
    await requestWakeLock();
  }
  updateMiniPlayer();
});

// Next Button
document.getElementById('nextBtn').addEventListener('click', () => {
  const stations = getFilteredStations();
  const currentIndex = stations.findIndex(s => s.id === state.currentStation?.id);
  const nextStation = stations[(currentIndex + 1) % stations.length];
  if (nextStation) playStation(nextStation);
});

// Previous Button
document.getElementById('prevBtn').addEventListener('click', () => {
  const stations = getFilteredStations();
  const currentIndex = stations.findIndex(s => s.id === state.currentStation?.id);
  const prevStation = stations[(currentIndex - 1 + stations.length) % stations.length];
  if (prevStation) playStation(prevStation);
});

// Volume Control
document.getElementById('volumeSlider').addEventListener('click', (e) => {
  const rect = e.currentTarget.getBoundingClientRect();
  const percent = (e.clientX - rect.left) / rect.width;
  state.volume = Math.max(0, Math.min(100, percent * 100));
  audio.volume = state.volume / 100;
  document.getElementById('volumeFill').style.width = `${state.volume}%`;
  saveToStorage();
});

// Search Input
document.getElementById('searchInput').addEventListener('input', (e) => {
  state.searchQuery = e.target.value;
  renderStations();
});

// Settings Modal
document.getElementById('settingsBtn').addEventListener('click', () => {
  renderCountriesSettings();
  renderLanguageGrid();
  // –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
  const cb = document.getElementById('compactCheckbox');
  if (cb) cb.classList.toggle('checked', state.compact);
  document.getElementById('settingsModal').classList.add('active');
});

document.getElementById('closeSettings').addEventListener('click', () => {
  document.getElementById('settingsModal').classList.remove('active');
});

// Theme Toggle
document.getElementById('themeToggle').addEventListener('click', () => {
  state.isDarkTheme = !state.isDarkTheme;
  document.body.classList.toggle('light-theme');
  const checkbox = document.getElementById('themeToggle').querySelector('.checkbox');
  checkbox.classList.toggle('checked');
  document.getElementById('themeText').textContent = state.isDarkTheme ? t('darkMode') : t('lightMode');
  saveToStorage();
});

// Compact list toggle
const compactRow = document.getElementById('compactToggle');
if (compactRow) {
  compactRow.addEventListener('click', () => {
    state.compact = !state.compact;
    const cb = document.getElementById('compactCheckbox');
    if (cb) cb.classList.toggle('checked', state.compact);
    saveToStorage();
    renderStations();
  });
}

// Add Station Modal
document.getElementById('addStationBtn').addEventListener('click', () => {
  document.getElementById('addStationModal').classList.add('active');
});

document.getElementById('closeAddStation').addEventListener('click', () => {
  document.getElementById('addStationModal').classList.remove('active');
});

document.getElementById('saveStation').addEventListener('click', () => {
  const name = document.getElementById('newStationName').value.trim();
  const url = document.getElementById('newStationUrl').value.trim();

  if (!name || !url) return showToast(t('fillAllFields'));
  if (!url.startsWith('http')) return showToast(t('invalidURL'));

  // –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ URL —Å—Ä–µ–¥–∏ ¬´–º–æ–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π¬ª
  const exists = (state.myStations || []).some(s => s.url === url);
  if (exists) {
    showToast('‚ö†Ô∏è Station already exists');
    return;
  }

  const newStation = { name, url, bitrate: 128 };
  state.myStations.push(newStation);
  allStations.MY = state.myStations;

  if (!state.enabledCountries.includes('MY')) {
    state.enabledCountries.push('MY');
  }

  document.getElementById('newStationName').value = '';
  document.getElementById('newStationUrl').value = '';
  document.getElementById('addStationModal').classList.remove('active');

  saveToStorage();
  showToast('‚úÖ ' + t('stationAdded'));
  renderTabs();
  renderStations();
});

// Sleep Timer Modal
document.getElementById('timerBtn').addEventListener('click', () => {
  document.getElementById('timerModal').classList.add('active');
});

document.getElementById('closeTimer').addEventListener('click', () => {
  document.getElementById('timerModal').classList.remove('active');
});

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ —Å–Ω–∞ —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á—ë—Ç–æ–º
let timerEndTime = null;
let timerUpdateInterval = null;

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
function updateTimerDisplay() {
  if (!timerEndTime) {
    document.getElementById('timerDisplay').classList.remove('active');
    return;
  }

  const now = Date.now();
  const remainingMs = timerEndTime - now;

  if (remainingMs <= 0) {
    document.getElementById('timerDisplay').classList.remove('active');
    if (timerUpdateInterval) {
      clearInterval(timerUpdateInterval);
      timerUpdateInterval = null;
    }
    timerEndTime = null;
    return;
  }

  const totalMinutes = Math.ceil(remainingMs / 60000);
  const hours = Math.floor(totalMinutes / 60);
  const minutes = totalMinutes % 60;

  let timeText = '';
  if (hours > 0) {
    timeText = `${hours}:${minutes.toString().padStart(2, '0')}`;
  } else {
    timeText = `${minutes} ${t('min')}`;
  }

  document.getElementById('timerText').textContent = `üí§ ${t('sleepTimer')}`;
  document.getElementById('timerRemaining').textContent = `‚è±Ô∏è ${t('remaining')}: ${timeText}`;
  document.getElementById('timerDisplay').classList.add('active');
}

document.querySelectorAll('.timer-option').forEach(option => {
  option.addEventListener('click', () => {
    if (option.id === 'cancelTimer') {
      if (state.sleepTimer) clearTimeout(state.sleepTimer);
      state.sleepTimer = null;
      timerEndTime = null;
      if (timerUpdateInterval) {
        clearInterval(timerUpdateInterval);
        timerUpdateInterval = null;
      }
      document.getElementById('timerDisplay').classList.remove('active');
      showToast('‚è∞ ' + t('timerCancelled'));
    } else {
      const minutes = parseInt(option.dataset.minutes);
      if (state.sleepTimer) clearTimeout(state.sleepTimer);
      if (timerUpdateInterval) clearInterval(timerUpdateInterval);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
      timerEndTime = Date.now() + (minutes * 60 * 1000);

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
      updateTimerDisplay();
      timerUpdateInterval = setInterval(updateTimerDisplay, 1000);

      state.sleepTimer = setTimeout(async () => {
        audio.pause();
        state.isPlaying = false;
        document.getElementById('playBtn').textContent = '‚ñ∂Ô∏è';
        await releaseWakeLock();
        showToast('üí§ ' + t('goodNight'));
        updateMiniPlayer();

        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–∞–π–º–µ—Ä–∞
        timerEndTime = null;
        if (timerUpdateInterval) {
          clearInterval(timerUpdateInterval);
          timerUpdateInterval = null;
        }
        document.getElementById('timerDisplay').classList.remove('active');
      }, minutes * 60 * 1000);

      showToast(`‚è∞ ${t('timerSet')} ${minutes} ${t('min')}`);
    }
    document.getElementById('timerModal').classList.remove('active');
  });
});

// Alarm Modal (open)
document.getElementById('alarmBtn').addEventListener('click', () => {
  const stations = getFilteredStations();
  // –ø–æ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–ø–∏—Å–æ–∫ + –Ω–∞–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä—ã—Ç—ã–π select
  buildAlarmCustomSelect(stations);
  document.getElementById('alarmModal').classList.add('active');
  renderWeekdays();
});

document.getElementById('closeAlarm').addEventListener('click', () => {
  document.getElementById('alarmModal').classList.remove('active');
});

// Set / Cancel Alarm
document.getElementById('setAlarm').addEventListener('click', async () => {
  const time = document.getElementById('alarmTime').value;
  const stationId = document.getElementById('alarmStation').value; // –∏–∑ —Å–∫—Ä—ã—Ç–æ–≥–æ select
  const selectedDays = Array.from(document.querySelectorAll('.weekday.active')).map(el => parseInt(el.dataset.day));

  if (!time || selectedDays.length === 0 || !stationId) {
    return showToast(t('fillAllFields'));
  }

  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  await requestNotificationPermission();

  state.alarm = { time, stationId, days: selectedDays };
  saveToStorage();
  updateAlarmDisplay();
  document.getElementById('alarmModal').classList.remove('active');
  showToast(`‚è≤Ô∏è ${t('alarmSet')} ${time}`);

  if (!alarmInterval) {
    alarmInterval = setInterval(checkAlarm, 60000);
  }
});

document.getElementById('cancelAlarm').addEventListener('click', () => {
  state.alarm = null;
  saveToStorage();
  updateAlarmDisplay();
  showToast('‚è≤Ô∏è ' + t('alarmCancelled'));

  if (alarmInterval) {
    clearInterval(alarmInterval);
    alarmInterval = null;
  }
});

// === Delete "My Station" by URL ===
function deleteMyStation(url) {
  if (!Array.isArray(state.myStations)) return;

  const idx = state.myStations.findIndex(s => s.url === url);
  if (idx === -1) return;

  const removed = state.myStations[idx];

  // —É–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ id –≤–∏–¥–∞ "MY-<index>"
  const favId = `MY-${idx}`;
  state.favorites = state.favorites.filter(id => id !== favId);

  // –µ—Å–ª–∏ –∏–≥—Ä–∞–ª–æ —ç—Ç–æ —Ä–∞–¥–∏–æ ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏–º
  if (state.currentStation && state.currentStation.url === removed.url) {
    try { audio.pause(); } catch(e){}
    state.currentStation = null;
    state.isPlaying = false;
    document.getElementById('playBtn').textContent = '‚ñ∂Ô∏è';
    updateMiniPlayer();
  }

  // —É–¥–∞–ª–∏—Ç—å
  state.myStations.splice(idx, 1);
  allStations.MY = state.myStations;

  saveToStorage();
  renderTabs();
  renderStations();

  showToast('üóëÔ∏è Station removed');
}

// Mini-player controls
document.getElementById('miniPlay').addEventListener('click', async () => {
  if (!state.currentStation) return showToast(t('selectStation'));
  if (state.isPlaying) {
    audio.pause();
    state.isPlaying = false;
    document.getElementById('playBtn').textContent = '‚ñ∂Ô∏è';
    await releaseWakeLock();
  } else {
    await audio.play();
    state.isPlaying = true;
    document.getElementById('playBtn').textContent = '‚è∏Ô∏è';
    await requestWakeLock();
  }
  updateMiniPlayer();
});

document.getElementById('miniPrev').addEventListener('click', () => {
  const stations = getFilteredStations();
  const currentIndex = stations.findIndex(s => s.id === state.currentStation?.id);
  const prevStation = stations[(currentIndex - 1 + stations.length) % stations.length];
  if (prevStation) playStation(prevStation);
});

document.getElementById('miniNext').addEventListener('click', () => {
  const stations = getFilteredStations();
  const currentIndex = stations.findIndex(s => s.id === state.currentStation?.id);
  const nextStation = stations[(currentIndex + 1) % stations.length];
  if (nextStation) playStation(nextStation);
});

// Dock buttons
document.getElementById('dockHome').addEventListener('click', () => {
  state.activeTab = 'all';
  renderTabs(); renderStations();
});
document.getElementById('dockFavorites').addEventListener('click', () => {
  state.activeTab = 'favorites';
  renderTabs(); renderStations();
});
document.getElementById('dockSettings').addEventListener('click', () => {
  renderCountriesSettings();
  renderLanguageGrid();
  const cb = document.getElementById('compactCheckbox');
  if (cb) cb.classList.toggle('checked', state.compact);
  document.getElementById('settingsModal').classList.add('active');
});

// Visualizer Animation
function animate() {
  const bars = visualizer.querySelectorAll('.bar');
  bars.forEach(bar => {
    const height = state.isPlaying ? Math.random() * 80 + 20 : 20;
    bar.style.height = `${height}%`;
  });
  requestAnimationFrame(animate);
}

// Initialize - Async IIFE –¥–ª—è await
(async function init() {
  console.log('üöÄ Initializing GrulyaFM...');
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–∏–∑ Supabase –∏–ª–∏ localStorage)
  await loadFromStorage();
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞–Ω—Ü–∏–∏
  loadStations();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º UI
  updateUI();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
  animate();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –±—É–¥–∏–ª—å–Ω–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
  if (state.alarm) {
    alarmInterval = setInterval(checkAlarm, 60000);
  }
  
  console.log('‚úÖ GrulyaFM initialized!');
})();

// Service Worker Registration
if ('serviceWorker' in navigator) {
  navigator.serviceWorker.register('/sw.js')
    .then(() => console.log('Service Worker registered'))
    .catch(err => console.log('Service Worker registration failed:', err));
}
// === ABOUT MODAL ===
document.getElementById('aboutBtn')?.addEventListener('click', () => {
  document.getElementById('aboutModal').classList.add('active');
});
document.getElementById('closeAbout')?.addEventListener('click', () => {
  document.getElementById('aboutModal').classList.remove('active');
});
// === Fallback: –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–∫ About –∏ Privacy ===
function openModal(id){
  const m = document.getElementById(id);
  if (m) m.classList.add('active');
}
function closeModal(id){
  const m = document.getElementById(id);
  if (m) m.classList.remove('active');
}

document.getElementById('btnAbout')?.addEventListener('click', ()=>openModal('aboutModal'));
document.getElementById('btnPrivacy')?.addEventListener('click', ()=>{
  // Privacy Policy –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ aboutModal, –ø–æ—ç—Ç–æ–º—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º aboutModal
  openModal('aboutModal');
  // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Å–µ–∫—Ü–∏–∏ Privacy
  setTimeout(() => {
    const privacySection = document.getElementById('privacySection');
    if (privacySection) {
      privacySection.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }, 100);
});

// –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ —Ñ–æ–Ω—É –∏–ª–∏ Esc
document.addEventListener('click', (e)=>{
  const modal = e.target.closest?.('.modal');
  if (modal && e.target === modal) modal.classList.remove('active');
});
document.addEventListener('keydown', (e)=>{
  if (e.key === 'Escape')
    document.querySelectorAll('.modal.active').forEach(m=>m.classList.remove('active'));
});

// === AUTO-RECONNECT: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä—ã–≤–µ –ø–æ—Ç–æ–∫–∞ ===
let reconnectAttempts = 0;
const MAX_RECONNECT_ATTEMPTS = 10;
let reconnectTimeout = null;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ audio
audio.addEventListener('error', (e) => {
  console.error('‚ùå Audio error:', e);

  if (state.isPlaying && state.currentStation && reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
    reconnectAttempts++;
    console.log(`üîÑ Attempting reconnect ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS}...`);

    // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    clearTimeout(reconnectTimeout);
    reconnectTimeout = setTimeout(() => {
      if (state.currentStation) {
        console.log('üîÑ Reconnecting to:', state.currentStation.name);
        setStream(audio, state.currentStation.url);
        audio.play().then(() => {
          console.log('‚úÖ Reconnected successfully!');
          reconnectAttempts = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        }).catch(err => {
          console.error('‚ùå Reconnect failed:', err);
        });
      }
    }, 2000);
  } else if (reconnectAttempts >= MAX_RECONNECT_ATTEMPTS) {
    console.error('‚ùå Max reconnect attempts reached. Stopping playback.');
    showToast('‚ùå Connection lost. Please try another station.');
    state.isPlaying = false;
    document.getElementById('playBtn').textContent = '‚ñ∂Ô∏è';
    updateMiniPlayer();
    releaseWakeLock();
    reconnectAttempts = 0;
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ stalled (–ø–æ—Ç–æ–∫ –∑–∞–≤–∏—Å)
audio.addEventListener('stalled', () => {
  console.warn('‚ö†Ô∏è Audio stream stalled, attempting to resume...');
  if (state.isPlaying && state.currentStation) {
    audio.load();
    audio.play().catch(err => {
      console.error('‚ùå Resume failed:', err);
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ended (–ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è)
audio.addEventListener('ended', () => {
  console.log('‚ö†Ô∏è Audio stream ended');
  if (state.isPlaying && state.currentStation) {
    console.log('üîÑ Stream ended, restarting...');
    audio.play().catch(err => {
      console.error('‚ùå Restart failed:', err);
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ waiting (–±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è)
audio.addEventListener('waiting', () => {
  console.log('‚è≥ Buffering...');
  document.getElementById('trackMetadata').textContent = t('connecting');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ playing (–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è)
audio.addEventListener('playing', () => {
  console.log('‚ñ∂Ô∏è Playing...');
  if (state.currentStation) {
    document.getElementById('trackMetadata').textContent = `${state.currentStation.country} ‚Ä¢ ${t('live')} ‚Ä¢ ${state.currentStation.bitrate ?? 128} kbps`;
  }
  reconnectAttempts = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pause (—Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–π –ø–∞—É–∑–µ)
audio.addEventListener('pause', () => {
  console.log('‚è∏Ô∏è Paused');
});

console.log('‚úÖ Auto-reconnect handlers initialized');

// End of app.js
