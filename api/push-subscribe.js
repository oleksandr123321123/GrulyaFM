// Vercel Serverless Function –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è push subscriptions
// –¢—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏: npm install web-push

import webpush from 'web-push';

// VAPID –∫–ª—é—á–∏ (–≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é web-push generate-vapid-keys)
// –í–ê–ñ–ù–û: –•—Ä–∞–Ω–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Vercel
const VAPID_PUBLIC_KEY = process.env.VAPID_PUBLIC_KEY || 'YOUR_PUBLIC_KEY';
const VAPID_PRIVATE_KEY = process.env.VAPID_PRIVATE_KEY || 'YOUR_PRIVATE_KEY';
const VAPID_SUBJECT = process.env.VAPID_SUBJECT || 'mailto:support@grulya-fm.vercel.app';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VAPID
webpush.setVapidDetails(
  VAPID_SUBJECT,
  VAPID_PUBLIC_KEY,
  VAPID_PRIVATE_KEY
);

// In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ë–î)
// –î–ª—è Vercel –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Vercel KV, Supabase, –∏–ª–∏ –¥—Ä—É–≥—É—é –ë–î
let subscriptions = [];

export default async function handler(req, res) {
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { subscription, userAgent, timestamp } = req.body;

    if (!subscription || !subscription.endpoint) {
      return res.status(400).json({ error: 'Invalid subscription' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    const exists = subscriptions.some(
      sub => sub.subscription.endpoint === subscription.endpoint
    );

    if (!exists) {
      subscriptions.push({
        subscription,
        userAgent,
        timestamp,
        createdAt: Date.now()
      });

      console.log(`‚úÖ New push subscription added. Total: ${subscriptions.length}`);
    } else {
      console.log(`‚úÖ Push subscription already exists`);
    }

    // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    // await saveToDB(subscription);

    return res.status(200).json({
      success: true,
      message: 'Subscription saved',
      totalSubscriptions: subscriptions.length
    });
  } catch (error) {
    console.error('Error saving subscription:', error);
    return res.status(500).json({
      error: 'Failed to save subscription',
      message: error.message
    });
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –¥—Ä—É–≥–æ–≥–æ endpoint (–Ω–∞–ø—Ä–∏–º–µ—Ä, /api/send-push)
export async function sendPushToSubscription(subscription, payload) {
  try {
    await webpush.sendNotification(subscription, JSON.stringify(payload));
    console.log('‚úÖ Push notification sent');
    return true;
  } catch (error) {
    console.error('‚ùå Error sending push:', error);

    // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ (410 Gone), —É–¥–∞–ª–∏—Ç—å –µ—ë
    if (error.statusCode === 410) {
      console.log('üóëÔ∏è Subscription expired, should be removed');
      // TODO: –£–¥–∞–ª–∏—Ç—å –∏–∑ –ë–î
    }

    return false;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
export function getSubscriptions() {
  return subscriptions;
}
